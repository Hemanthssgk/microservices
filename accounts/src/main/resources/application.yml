server:
  port: 8080
spring:
  application:
    name: "accounts" # this should be same name as of what we kept in configuration server yamls. so that client is gonna call server using this name
  # using default profile incase not provided anything. and importing the yamls using the api call.
  profiles:
    active: "default"
  config:
    # this is optional becuase, in docker compose i am gonna add another config server details.
    #    But problem is it is appened to this. so everytime it is looking for both local host and
    #  hostname what we provide in the docker compose. so iam using optional. just to make sure it
    #  works both in local and another environments.
    import: "optional:configserver:http://localhost:8071/"# we can also use optional:configserver which will make this is optinal and starts the app
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
#  rabbitmq:
#    host: "localhost"
#    port: 5672
#    username: "guest"
#    password: "guest"
#  this will import the another yml. As iam gonna implement a config server. commenting this out!!!
#  config:
#    import:
#      - application_test.yml
#  # this will set active profile as test. and common properties will be overriden by values in test yml!!
#  profiles:
#    active:
#      -test
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

#below are for the fault tolerance using resiliency4j circuit breaker pattern
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      waitDurationInOpenState: 10000
      failureRateThreshold: 50

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint: # this will expose the shutdown url, which will allows us to shutdown the applciation from the url.
    shutdown:
      enabled: true
  info: # we are enabling info related endpoints. so that it is used by the service discovery to register the application with the application information we provided in here.
    env:
      enabled: true
endpoints:
  shutdown:
    enabled: true


build:
  version: "2"
contact-Info:
  info:
    name: Hemanth
    email: ssgkhemanth99@gmail.com
  phoneNumber:
    - "9581327524"
    - "7207492325"
  implemented_date: "2024-02-09"

# below configuration will enable server discovery. they will help connecting accounts service with the eureka agent and fetches the available services and stores them in cache. Also register the service and deregister it when it stops..
eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

# using these info details application is registered in the service registry....
info:
  app:
    name: "accounts"
    description: "Eazy Bank accounts Application"
    version: "1.0.0"

